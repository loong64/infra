name: Build Static Node.js Container

on:
  workflow_dispatch:
  pull_request:
    paths:
      - '.github/workflows/build-static-node.yml'
      - 'staticnode/**'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-static-node.yml'
      - 'staticnode/**'

jobs:
  load-node-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.load-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v5.0.0
        with:
          repository: pyca/infra
          persist-credentials: false
      - name: Load Node.js versions
        id: load-versions
        run: |
          echo "versions=$(cat staticnode/node-versions.json | jq -c '.')" >> $GITHUB_OUTPUT

  build:
    name: Build node.js
    runs-on: ${{ matrix.IMAGE.RUNNER }}
    needs: load-node-versions
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        IMAGE:
          - {RUNNER: "ubuntu-latest", MANYLINUX_ARCH: "loongarch64"}
          # - {RUNNER: "ubuntu-latest", MANYLINUX_ARCH: "ppc64le"}
          - {RUNNER: "ubuntu-latest", MANYLINUX_ARCH: "s390x"}
        NODE_CONFIG: ${{ fromJson(needs.load-node-versions.outputs.versions) }}
          
    steps:
    - uses: actions/checkout@v5.0.0
      with:
        persist-credentials: false
    - uses: actions/checkout@v5.0.0
      with:
        repository: pyca/infra
        sparse-checkout: |
          staticnode
          cryptography-linux
        path: source
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
    - name: Set Node.js version
      run: |
        mv source/cryptography-linux cryptography-linux
        mv source/staticnode staticnode
        rm -rf source
        git apply patches/*.patch
        echo "NODE_VERSION=${{ matrix.NODE_CONFIG.version }}" >> $GITHUB_ENV
        echo "NODE_SHA256SUM=${{ matrix.NODE_CONFIG.sha256sum }}" >> $GITHUB_ENV
        sed -i 's@FROM alpine@FROM ghcr.io/loong64/alpine@g' staticnode/Dockerfile
        case ${{ matrix.IMAGE.MANYLINUX_ARCH }} in
          loongarch64)
            arch=loong64
            node_arch=loong64
            sed -i 's/--fully-static/--fully-static --openssl-no-asm/g' staticnode/Dockerfile
            sed -i 's@quay.io/pypa/manylinux2014@ghcr.io/loong64/manylinux_2_38@g' staticnode/Dockerfile-test
            ;;
          ppc64le)
            arch=ppc64le
            node_arch=ppc64
            ;;
          s390x)
            arch=s390x
            node_arch=s390x
            ;;
          *)
            echo "Unsupported architecture: ${{ matrix.IMAGE.MANYLINUX_ARCH }}"
            exit 1
            ;;
        esac
        echo "BUILD_ARCH=$arch" >> $GITHUB_ENV
        echo "NODE_ARCH=$node_arch" >> $GITHUB_ENV
    - name: Build the Docker image
      run: |
        echo building node.js $NODE_VERSION
        docker buildx build --platform linux/$BUILD_ARCH --tag ghcr.io/loong64/static-nodejs-$BUILD_ARCH:$NODE_VERSION --build-arg VERSION=$NODE_VERSION --build-arg ARCH=$NODE_ARCH --build-arg SHA256SUM=$NODE_SHA256SUM staticnode --load
    - name: Test static node.js on manylinux
      run: |
        cd staticnode
        docker buildx build --platform linux/$BUILD_ARCH -f Dockerfile-test -t test-node --build-arg MANYLINUX_ARCH=${{ matrix.IMAGE.MANYLINUX_ARCH }} --build-arg CONTAINER_NAME=ghcr.io/loong64/static-nodejs-$BUILD_ARCH:$NODE_VERSION . --load
        docker run test-node /staticnode/bin/node -e "console.log('hello world'); console.log(process.version)"
    - name: Login to github
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    - name: Push image
      run: docker push "ghcr.io/loong64/static-nodejs-${BUILD_ARCH}:${NODE_VERSION}"
      if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
